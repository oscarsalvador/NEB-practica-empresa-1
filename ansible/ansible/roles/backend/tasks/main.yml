- include_vars:
    file: "../vars/main.yml"
  
- name: az_cli
  # shell: az account list
  shell: |
    az account set --subscription {{ subscription }}
    az account show
    # az account list
  register: output

- debug: var=output.stdout_lines

- name: Get Azure Cache for Redis with access keys by name
  azure_rm_rediscache_info:
    resource_group: '{{ resource_group_name }}'
    name: '{{ redis_db_name }}'
    return_access_keys: true
  register: rdb

- debug: 
    msg: '{{ rdb.rediscaches[0].host_name }} {{ rdb.rediscaches[0].access_keys.primary }}'

- name: Get instance of Database Account
  azure_rm_cosmosdbaccount_info:
    resource_group: '{{ resource_group_name }}'
    name: '{{ cosmos_db_account_name }}'
    retrieve_connection_strings: true
  register: db

- debug:
    msg: '{{ db.accounts[0].connection_strings.connection_strings[0].connection_string }}'
    # var: db # msg y var son incompatibles

- name: Get facts for one account
  azure_rm_storageaccount_info:
    resource_group: '{{ resource_group_name }}'
    name: '{{ storage_account_name }}'
    show_connection_string: true
  register: sa

- debug:
    msg: '{{ sa.storageaccounts[0].primary_endpoints.blob.connectionstring.split("AccountKey=")[-1].split(";")[0] }}'

- name: Get instance of Registry
  azure_rm_containerregistry_info:
    resource_group: '{{ resource_group_name }}'
    name: '{{ acr_name }}'
    retrieve_credentials: true
  register: acr
  
- debug:
    msg: '{{ acr.registries[0].credentials.username }} {{ acr.registries[0].credentials.password }} {{ acr.registries[0].login_server }}'

- name: Create sample container group
  azure_rm_containerinstance:
    resource_group: '{{ resource_group_name }}'
    name: '{{ backend_container_group_name }}'
    location: '{{ location }}'
    os_type: linux
    ip_address: public

    containers:
      - name: '{{ backend_container_name }}'
        image: '{{ acr.registries[0].login_server }}/{{ backend_image }}'
        cpu: 0.5
        memory: 4

        # environment_variables: {
        #   MONGO_URL: '{{ db.accounts[0].connection_strings.connection_strings[0].connection_string }}',
        #   REDIS_HOST: '{{ rdb.rediscaches[0].host_name }}',
        #   REDIS_PORT: 6380,
        #   REDIS_PASS: '{{ rdb.rediscaches[0].access_keys.primary }}',
        #   STORAGE_ACCOUNT_NAME: '{{ storage_account_name }}',
        #   STORAGE_CONTAINER_NAME: '{{ storage_container_name }}',
        #   STORAGE_ACCOUNT_KEY: '{{ sa.storageaccounts[0].primary_endpoints.blob.connectionstring.split("AccountKey=")[-1].split(";")[0] }}'
        # }

        environment_variables:
          - name:  MONGO_URL 
            is_secure: false
            value: '{{ db.accounts[0].connection_strings.connection_strings[0].connection_string }}'
          - name:  REDIS_HOST 
            is_secure: false
            value: '{{ rdb.rediscaches[0].host_name }}'
          - name:  REDIS_PORT 
            is_secure: false
            value: 6380
          - name:  REDIS_PASS 
            is_secure: false
            value: '{{ rdb.rediscaches[0].access_keys.primary }}'
          - name:  STORAGE_ACCOUNT_NAME 
            is_secure: false
            value: '{{ storage_account_name }}'
          - name:  STORAGE_CONTAINER_NAME 
            is_secure: false
            value: '{{ storage_container_name }}'
          - name:  STORAGE_ACCOUNT_KEY 
            is_secure: false
            value: '{{ sa.storageaccounts[0].primary_endpoints.blob.connectionstring.split("AccountKey=")[1].split(";")[0] }}'

        ports:
          - 4000

    registry_username: '{{ acr.registries[0].credentials.username }}'
    registry_password: '{{ acr.registries[0].credentials.password }}' 
    registry_login_server: '{{ acr.registries[0].login_server }}'
  register: acib

- debug:
    var: acib