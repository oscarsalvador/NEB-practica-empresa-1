- include_vars:
    # file: "../vars/main.yml"
    file: '{{"../../backend/vars/main.yml" if targetimage == "backend" else "../../frontend/vars/main.yml"}}'
    
  # "error connectiong: error while fetching server api => docker disabled in systemctl"
- name: where am i
  # shell: az account list
  shell: | 
    pwd
    ls -lah 
    ls -lah '../../{{ targetimage }}'
  register: output

- debug:
    var: output

- name: Get instance of Registry
  azure_rm_containerregistry_info:
    resource_group: '{{ resource_group_name }}'
    name: '{{ acr_name }}'
    retrieve_credentials: true
  register: acr
  
- debug:
    msg: '{{ acr.registries[0].credentials.username }} {{ acr.registries[0].credentials.password }} {{ acr.registries[0].login_server }}'

- name: Build image and with build args
  community.docker.docker_image:
    # name: '{{ acr.registries[0].login_server }}/{{ backend_image }}'
    name: '{{ backend_image if targetimage == "backend" else frontend_image }}'
    tag: 1.0.0
    build:
      # dockerfile: '../../{{ targetimage }}/Dockerfile'
      path: '../../{{ targetimage }}'
    source: build
  register: build

- debug:
    var: build

- name: Log into private registry and force re-authorization
  community.docker.docker_login:
    registry_url: '{{ acr.registries[0].login_server }}'
    username: '{{ acr.registries[0].credentials.username }}' 
    password: '{{ acr.registries[0].credentials.password }}'
    reauthorize: true
  register: login

- debug:
    var: login

- name: Tag and push to docker hub
  community.docker.docker_image:
    name: '{{ backend_image if targetimage == "backend" else frontend_image }}:1.0.0'
    repository: '{{ acr.registries[0].login_server }}/{{ backend_image if targetimage == "backend" else frontend_image }}:latest'
    push: true
    source: local
  register: push

- debug:
    var: push